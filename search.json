[{"path":"https://lmartinezgili.github.io/readyomics/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 readyomics authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/articles/readyomics.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"readyomics","text":"following example shows overall workflow readyomics. example data 16S rRNA gene sequencing metataxonomics dataset human fecal samples. subset 29 samples T2DM prospective cohort screened MASLD: Forlano, R.*, Martinez-Gili, L.*, Takis, P., Miguens-Blanco, J., Liu, T., Triantafyllou, E., … Manousou, P. (2024). Disruption gut barrier integrity host–microbiome interactions underlie MASLD severity patients type-2 diabetes mellitus. Gut Microbes, 16(1). https://doi.org/10.1080/19490976.2024.2304157 Example input files can found inst/extdata folder readyomics source, can imported using base::system.file() command shown Import inspect data. Note: example meant showcase basic package usage. meant provide guidelines suitable study-specific choices data processing analysis.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/articles/readyomics.html","id":"installation","dir":"Articles","previous_headings":"Example","what":"Installation","title":"readyomics","text":"","code":"install.packages(\"readyomics\")"},{"path":"https://lmartinezgili.github.io/readyomics/articles/readyomics.html","id":"load-the-package","dir":"Articles","previous_headings":"Example","what":"Load the package","title":"readyomics","text":"","code":"library(readyomics)"},{"path":"https://lmartinezgili.github.io/readyomics/articles/readyomics.html","id":"import-and-inspect-data","dir":"Articles","previous_headings":"Example","what":"Import and inspect data","title":"readyomics","text":"","code":"# Raw matrix of ASV counts asv_counts <- read.csv(system.file(\"extdata\", \"asv_raw_counts.csv\", package = \"readyomics\"),                         check.names = FALSE,                         row.names = 1)  # Taxonomy table taxa <- read.csv(system.file(\"extdata\", \"taxonomy.csv\", package = \"readyomics\"),                   check.names = FALSE,                   row.names = 1)  # Sample data sample_data <- read.csv(system.file(\"extdata\", \"sample_data.csv\", package = \"readyomics\"),                          check.names = FALSE,                          row.names = 1) head(asv_counts) head(taxa) head(sample_data)"},{"path":"https://lmartinezgili.github.io/readyomics/articles/readyomics.html","id":"format-sample_data","dir":"Articles","previous_headings":"Example","what":"Format sample_data","title":"readyomics","text":"sample_data must include column named sample_id unique IDs sample study. longitudinal studies, sample_id still needs unique, therefore column subject_id can used indicate samples coming individual. omics X data matrix must also use sample_id labels row names, can matched analysis. readyomics always checks sample ID matching. addition, categorical variables must set factors downstream statistical analyses.","code":"sample_data <- sample_data |>   dplyr::mutate(sample_id = rownames(sample_data),          groups_liver = factor(groups_liver, levels = c(\"FL\", \"FL_HS\")),          sex = factor(sex),          PPI = factor(PPI),          smoking = factor(smoking),          alcohol_imp = factor(alcohol_imp))"},{"path":"https://lmartinezgili.github.io/readyomics/articles/readyomics.html","id":"process-data-using-process_ngs","dir":"Articles","previous_headings":"Example","what":"Process data using process_ngs()","title":"readyomics","text":"choice processing function depend type omics analysed. use process_ngs() example, suitable metataxonomics. See also process_ms() need process mass spectrometry (MS) data like metabolomics proteomics. process_ms() compatible nuclear magnetic resonance spectroscopy (NMR) data, although limited processing options. verbose = TRUE can see useful information printed console (see process_ngs() settings parameters options). example, phylogenetic tree provided, 1 sample removed due falling default 500 reads threshold sequencing depth, 372 features kept filtering 10 % prevalence. process_ngs() generates list object contains: processed matrix X_processed (case clr-transformed). matched sample_data (sdata_final). phyloseq_raw object contains phyloseq objects taxonomic ranks (see build_phyloseq() information). NULL phyloseq_eco object, counts adjusted microbial load. Counts adjusted microbial load longer compositional referred “ecosystem counts”, hence “_eco” suffix. see apply processed data common omics analysis.","code":"# Samples as rows required for process_ngs asv_counts <- t(asv_counts)  # Process asv_counts data asv_ready <- process_ngs(X = asv_counts,                           sample_data = sample_data,                           taxa_table = taxa,                           normalise = \"none\",                          transform = \"clr\",                           eco_phyloseq = FALSE) #> The phyloseq object will be built without phylogenetic tree: 'phylo_tree' not provided. #> 1 samples removed due to zero total read count or < 500 'min_reads'. #> 28 samples found in common between 28 rows in 'X' and 29 rows in 'sample_data'. #> 372 out of 2237 features were kept after 10 % prevalence filter. #> Zeros will be imputed with 'zCompositions::cmultRepl()' prior to clr-transformation."},{"path":"https://lmartinezgili.github.io/readyomics/articles/readyomics.html","id":"pca-visualisation-with-mva","dir":"Articles","previous_headings":"Example","what":"PCA visualisation with mva()","title":"readyomics","text":"default, mva() show PCA diagnostics plot, useful examine potential outliers, batch effects clusters related groups interest. addition storing ropls::opls() object, mva() generates publication-ready scores plot, case color-coded variable groups_liver indicated:  plot generated using ggplot2, can tweaked using ggplot2 functions export.","code":"pca <- mva(X = asv_ready$X_processed,             sample_data = asv_ready$sdata_final,             group_colour = \"groups_liver\",             plot_title = \"Beta diversity (Aitchison)\") #> 28 samples found in common between 28 rows in 'X' and 28 rows in 'sample_data'. #> PCA #> 28 samples x 372 variables #> standard scaling of predictors #>       R2X(cum) pre ort #> Total    0.533   9   0 pca$scores_plot"},{"path":"https://lmartinezgili.github.io/readyomics/articles/readyomics.html","id":"permutational-analysis-of-variance-with-permanova","dir":"Articles","previous_headings":"Example","what":"Permutational analysis of variance with permanova()","title":"readyomics","text":"PERMANOVA quite popular microbiome datasets inspect differences beta diversity, can also applied type omics data. default, function sets parameter indenpendent = TRUE, meaning permanova() also calculates overall variance covariable model independently, addition vegan::adonis2() output. see warning related verbose message (verbose = TRUE; default) permutation parameters used variables. can set specific permutation control parameters covariable perm_control. particularly useful example longitudinal studies, might need apply permutation blocks according certain variables. case, good default 999 unrestricted random permutations, can ignore warning verbose. See permanova() information. output list contains distance matrix permutation matrix used, well two tables results permanova_joint, default vegan::adonis2() result, permanova_indep, independent = TRUE.","code":"# Define model rhs_model <- ~ groups_liver + alcohol_imp + sex + age + PPI + smoking  # Run PERMANOVA pova <- permanova(X = asv_ready$X_processed,                    sample_data = asv_ready$sdata_final,                   formula_rhs = rhs_model,                    platform = \"ngs\",                    assay = \"Taxonomy\",                    seed = 165) #> Warning in permanova(X = asv_ready$X_processed, sample_data = asv_ready$sdata_final, : 'independent = TRUE' but no variable-specific permutation controls found. Default 'perm_control$joint_terms' will be used. #> 28 samples found in common between 28 rows in 'X' and 28 rows in 'sample_data'. #> Permutation parameters for groups_liver have not been specified. Default 'perm_control$joint_terms' will be used. #> Permutation parameters for alcohol_imp have not been specified. Default 'perm_control$joint_terms' will be used. #> Permutation parameters for sex have not been specified. Default 'perm_control$joint_terms' will be used. #> Permutation parameters for age have not been specified. Default 'perm_control$joint_terms' will be used. #> Permutation parameters for PPI have not been specified. Default 'perm_control$joint_terms' will be used. #> Permutation parameters for smoking have not been specified. Default 'perm_control$joint_terms' will be used. pova$permanova_joint pova$permanova_indep"},{"path":"https://lmartinezgili.github.io/readyomics/articles/readyomics.html","id":"differential-analysis-with-dana","dir":"Articles","previous_headings":"Example","what":"Differential ANAlysis with dana()","title":"readyomics","text":"common analysis goal omics data try find omic features associated traits interest. dana() readyomics function differential analysis. present, dana() supports linear regressions stats::lm() linear mixed effects models lme4::lmer(). dana() main strengths : Full flexibility model formula (random effects, interaction terms). Likelihood ratio tests (LRT) addition coefficient P values. LRT especially recommended small studies (approx. 100 samples). formula terms can tested LRT (interaction terms, random effects). Several terms can tested (e.g. term_LRT = c(\"sex\" , \"BMI\", \"1 | country\")). Easy set run parallel using future::plan() - user full control, allowing good scalability big data. Toggable progress bar progressr. fit linear regression main variables dataset: first see warning message suggesting use parallel computing due X matrix 100 features. However can ignored stats::lm() quick anyway. dana() function generates dana object including input data used, publication-ready fit table summarizing main model results feature analysed (\"feat_id\" column). working multiple omics, useful also specify platform assay columns seamless downstream omics results integration. one terms specified likelihood ratio testing term_LRT, dana also includes lrt table LRT results. case used LRT test groups_liver.","code":"# future::plan(multisession, workers = 4) # For running 4 processes in parallel # progressr::handlers(global = TRUE) # To show progress bar dana_asv <- dana(X = asv_ready$X_processed,                   sample_data = asv_ready$sdata_final,                  formula_rhs = rhs_model,                   term_LRT = \"groups_liver\",                  platform = \"ngs\") #> Warning in dana(X = asv_ready$X_processed, sample_data = asv_ready$sdata_final, : Set 'future::plan' parallel strategy to speed up computation. #> 28 samples found in common between 28 rows in 'X' and 28 rows in 'sample_data'. #> Using model: stats::lm. # plan(sequential) # To disable parallel processing head(dana_asv$fit) head(dana_asv$lrt)"},{"path":"https://lmartinezgili.github.io/readyomics/articles/readyomics.html","id":"adjusting-for-multiple-comparisons-with-adjust_pval","dir":"Articles","previous_headings":"Example > Differential ANAlysis with dana()","what":"Adjusting for multiple comparisons with adjust_pval()","title":"readyomics","text":"leverage R base pipes conveniently add adjusted P values dana object results adjust_pval(). fit table now new columns adjusted P values. chose adjust terms fit table (padj_by = \"terms\"), adjust covariable P value individually. see one column adjusted P values format padj_[padj_method]_[term] (e.g. \"padj_BH_sex2\"). alternative (padj_by = \"\") nominal P values fit adjusted together. case, single column added fit, format padj_[padj_method]. formula fixed term also tested via LRT, adjust_pval() also add adjusted LRT P value fit table. LRT P values \"_LRT\" suffix (see last column \"padj_BH_groups_liver_LRT\"). Similarly, can inspect lrt table added adjusted P values. single adjustment method chosen priori, possible add one P value adjustment method (e.g. padj_method = c(\"BH\", \"storey\"), padj_method_LRT = c(\"BH\", \"bonferroni\")). See adjust_pval() information.","code":"dana_asv <- dana_asv |>   adjust_pval(padj_by = \"terms\",                padj_method = \"BH\",                padj_method_LRT = \"BH\") head(dana_asv$fit) head(dana_asv$lrt)"},{"path":"https://lmartinezgili.github.io/readyomics/articles/readyomics.html","id":"adding-feature-labels-with-add_feat_name-or-add_taxa","dir":"Articles","previous_headings":"Example > Differential ANAlysis with dana()","what":"Adding feature labels with add_feat_name() or add_taxa()","title":"readyomics","text":"Original labels omics data can contain non-alphanumeric characters symbols problematic fit dana() models. process_ms() allows rename features \"feat_1\", \"feat_2\", , setting rename_feat = TRUE, storing original labels. add_feat_name() can used add original labels dana object plotting significant results. Similarly, metataxonomics metagenomics data, interesting read genus/species/strain origin rather cryptic \"ASV1\". case, use add_taxa(). also adds corresponding higher hierarchy taxa names. can see various columns added fit table. taxa_rank = \"asv\", column feature label taxon_name default adds species (provided) genus name ASV ID, collapsed “_“, format quite common publication plots.","code":"dana_asv <- dana_asv |>   add_taxa(taxa_table = taxa,             taxa_rank = \"asv\") head(dana_asv$fit)"},{"path":"https://lmartinezgili.github.io/readyomics/articles/readyomics.html","id":"visualise-results-with-ready_plots","dir":"Articles","previous_headings":"Example > Differential ANAlysis with dana()","what":"Visualise results with ready_plots()","title":"readyomics","text":"can pipe ready_plots() previous command, skip previous step directly apply ready_plots() dana object explore results default feature IDs (\"feat_id\" column). ready_plots() automatically generates stores commonly used publication-ready plots: Differential analysis significant coefficients (volcano, dotplot, heatmap - capped 50 features), Significant features abundance (capped 10 significant, plots specific features can requested X_colnames parameter). example, features significant multiple comparison correction. prompts error message ready_plots() halts execution. somewhat expected using small portion original dataset toy example. formal analysis end , concluding null hypothesis rejected. case, use nominal P value showcase ready_plots() functionality. verbose = TRUE (default) ready_plots() displays total number significant features chosen P value threshold. can inspect plots simply running:       plots generated ggplot2, can easily customized.","code":"# Generates error due to lack of significant features: dana_asv <- dana_asv |>   ready_plots(term_name = \"groups_liver\", # Formula fit term of interest               pval_match = \"groups_liver_LRT\", # LRT adjusted P values will be used               sdata_var = \"groups_liver\", # Grouping variable for individual feature plots               group_colours = c(FL = \"#4daf4a\", # Optional color customization                                 FL_HS = \"#377eb8\")) #> Error in ready_plots(dana_asv, term_name = \"groups_liver\", pval_match = \"groups_liver_LRT\", : No significant results at selected 0.1 significance threshold. dana_asv <- dana_asv |>   ready_plots(term_name = \"groups_liver\",               pval_match = \"Pr\", # Nominal P value for illustration purposes               sdata_var = \"groups_liver\",                group_colours = c(FL = \"#4daf4a\",                                  FL_HS = \"#377eb8\")) #> 33 significant results found at selected 0.1 significance threshold. #> 'X_colnames' = NULL: the first 10 most significant features will be plotted. dana_asv$plots #> $coeff_volcano #> Warning: Removed 339 rows containing missing values or values outside the scale range #> (`geom_text_repel()`). #> Warning: ggrepel: 7 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps #>  #> $coeff_heatmap #>  #> $coeff_point #>  #> $feat_boxplot #>  #> $feat_violin #>  #> $feat_ridge #> Picking joint bandwidth of 0.471"},{"path":"https://lmartinezgili.github.io/readyomics/articles/readyomics.html","id":"bonus-microbiome-dana-for-alpha-diversity","dir":"Articles","previous_headings":"Example","what":"Bonus (microbiome): dana() for alpha diversity","title":"readyomics","text":"","code":"# Compute alpha diversity measures for the ASV phyloseq object alpha <- phyloseq::estimate_richness(asv_ready$phyloseq_raw$asv) |>   dplyr::select(-matches(\"ace|chao|fisher\")) |>   scale()  # Calculate alpha diversity differences among groups with dana() dana_alpha <- dana(X = alpha,                     sample_data = asv_ready$sdata_final,                    formula_rhs = rhs_model,                     term_LRT = \"groups_liver\",                    platform = \"ngs\") #> 28 samples found in common between 28 rows in 'X' and 28 rows in 'sample_data'. #> Using model: stats::lm."},{"path":"https://lmartinezgili.github.io/readyomics/articles/readyomics.html","id":"bonus-microbiome-dana-for-higher-taxonomic-ranks","dir":"Articles","previous_headings":"Example","what":"Bonus (microbiome): dana() for higher taxonomic ranks","title":"readyomics","text":"following example shows code genus rank, code easily wrapped function iterates across taxa ranks analyse , using parallel computation future::plan().","code":"# CLR-transform genus rank counts table genus_ready <- process_ngs(X = as.data.frame(asv_ready$phyloseq_raw$genus@otu_table),                             sample_data = asv_ready$sdata_final,                             taxa_table = taxa,                             normalise = \"none\",                            transform = \"clr\",                            raw_phyloseq = FALSE,                            eco_phyloseq = FALSE,                            verbose = FALSE)  # Run dana dana_genus <- dana(X = genus_ready$X_processed,                     sample_data = genus_ready$sdata_final,                    formula_rhs = rhs_model,                     term_LRT = \"groups_liver\",                    platform = \"ngs\") |>   adjust_pval(padj_by = \"terms\",                padj_method = \"BH\",                padj_method_LRT = \"BH\") |>   add_taxa(taxa_table = taxa,             taxa_rank = \"genus\") |>   ready_plots(term_name = \"groups_liver\",               pval_match = \"Pr\", # Nominal P value for illustration purposes               sdata_var = \"groups_liver\",               group_colours = c(FL = \"#4daf4a\",                                 FL_HS = \"#377eb8\")) #> Warning in dana(X = genus_ready$X_processed, sample_data = genus_ready$sdata_final, : Set 'future::plan' parallel strategy to speed up computation. #> 28 samples found in common between 28 rows in 'X' and 28 rows in 'sample_data'. #> Using model: stats::lm. #> 9 significant results found at selected 0.1 significance threshold. #> 'X_colnames' = NULL: the first 10 most significant features will be plotted.  # Inspect plots dana_genus$plots #> $coeff_volcano #> Warning: Removed 97 rows containing missing values or values outside the scale range #> (`geom_text_repel()`). #>  #> $coeff_heatmap #>  #> $coeff_point #>  #> $feat_boxplot #>  #> $feat_violin #>  #> $feat_ridge #> Picking joint bandwidth of 0.595"},{"path":"https://lmartinezgili.github.io/readyomics/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Laura Martinez-Gili. Maintainer, author, copyright holder.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Martinez-Gili L (2025). readyomics: Ready--Use Omics Formatting, Analysis, Visualization Pipeline. R package version 0.2.0, https://lmartinezgili.github.io/readyomics/.","code":"@Manual{,   title = {readyomics: Ready-to-Use Omics Formatting, Analysis, and Visualization Pipeline},   author = {Laura Martinez-Gili},   year = {2025},   note = {R package version 0.2.0},   url = {https://lmartinezgili.github.io/readyomics/}, }"},{"path":"https://lmartinezgili.github.io/readyomics/index.html","id":"readyomics-","dir":"","previous_headings":"","what":"Ready-to-Use Omics Formatting, Analysis, and Visualization Pipeline","title":"Ready-to-Use Omics Formatting, Analysis, and Visualization Pipeline","text":"readyomics provides pipeline formatting, analyzing, visualizing omics data - regardless omics type (e.g. transcriptomics, proteomics, metabolomics, metagenomics). designed flexibility, reproducibility, scalability across wide range study designs, modular components statistical analysis visualization. includes tools : Process data analysis-ready. Perform multivariate analysis. Fit linear mixed-effects models. Produce publication-quality plots.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/index.html","id":"essential-standard-terms-used-in-the-package","dir":"","previous_headings":"","what":"Essential standard terms used in the package","title":"Ready-to-Use Omics Formatting, Analysis, and Visualization Pipeline","text":"Platform: technology instrument used generate omics data, next-generation sequencing (NGS), mass spectrometry (MS), nuclear magnetic resonance spectroscopy (NMR). Feature(s): general term biological variable profiled omics platform, metabolites, lipids, genes, proteins, microbial taxa, depending assay. Sample data (!= metadata*): biological demographic information collected study sample (e.g., experimental group, age, sex, BMI). *Note: strict sense, metadata (“data data”) refers information describing context, structure, properties dataset — acquisition date, instrument settings, plate/well ID, run order. refer biological demographic variables. avoid ambiguity, readyomics adopts convention phyloseq, using term sample data variables describing study samples.","code":""},{"path":[]},{"path":"https://lmartinezgili.github.io/readyomics/index.html","id":"data-processing-normalisation-transformation-filtering","dir":"","previous_headings":"Main functionalities","what":"Data processing (normalisation, transformation, filtering)","title":"Ready-to-Use Omics Formatting, Analysis, and Visualization Pipeline","text":"process_ngs(): process next-generation sequencing data. process_ms(): process MS NMR data. build_phyloseq(): build phyloseq objects metataxonomic data.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/index.html","id":"multivariate-analysis","dir":"","previous_headings":"Main functionalities","what":"Multivariate analysis","title":"Ready-to-Use Omics Formatting, Analysis, and Visualization Pipeline","text":"mva(): PCA, PLS OPLS models. permanova(): wrapper vegan::adonis2() function additional options summary results.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/index.html","id":"differential-abundanceexpression-analysis","dir":"","previous_headings":"Main functionalities","what":"Differential [abundance/expression] analysis","title":"Ready-to-Use Omics Formatting, Analysis, and Visualization Pipeline","text":"dana(): fit feature-wise linear fixed mixed effects models. adjust_pval(): methods adjust nominal P-values dana() result. ready_plots(): visualize dana results significant features.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Ready-to-Use Omics Formatting, Analysis, and Visualization Pipeline","text":"can install development version readyomics GitHub:","code":"install.packages(\"readyomics\") devtools::install_github(\"lmartinezgili/readyomics\")"},{"path":[]},{"path":"https://lmartinezgili.github.io/readyomics/index.html","id":"types-of-input-data","dir":"","previous_headings":"Get started","what":"Types of input data","title":"Ready-to-Use Omics Formatting, Analysis, and Visualization Pipeline","text":"readyomics omics-agnostic inclusive possible. Raw omics files (e.g., .fastq, .mzML) must first pre-processed external commercial open-source pipelines data matrix row corresponds sample column corresponds measured omics feature.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/index.html","id":"required-files-and-format","dir":"","previous_headings":"Get started","what":"Required files and format","title":"Ready-to-Use Omics Formatting, Analysis, and Visualization Pipeline","text":"X: .csv .RDS table omics data (samples rows features columns). sample_data (sdata): .csv .RDS table study sample information (samples rows). sample_id must column sample_data unique ids sample. Row names X sample_data must match sample_id values, though order can differ — readyomics functions check align automatically.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/index.html","id":"documentation-and-examples","dir":"","previous_headings":"Get started","what":"Documentation and Examples","title":"Ready-to-Use Omics Formatting, Analysis, and Visualization Pipeline","text":"tutorials, examples, reference documentation, visit readyomics website.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/add_feat_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Append feature names to a dana object — add_feat_name","title":"Append feature names to a dana object — add_feat_name","text":"Adds feat_name column dana object map feat_id original labels.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/add_feat_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append feature names to a dana object — add_feat_name","text":"","code":"add_feat_name(dana_obj, feat_names)"},{"path":"https://lmartinezgili.github.io/readyomics/reference/add_feat_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append feature names to a dana object — add_feat_name","text":"dana_obj dana object returned dana(). feat_names data frame mapping feat_id feat_name. Must contain columns \"feat_id\" \"feat_name\".","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/add_feat_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append feature names to a dana object — add_feat_name","text":"modified version dana_obj, feat_name column added applicable components.","code":""},{"path":[]},{"path":"https://lmartinezgili.github.io/readyomics/reference/add_feat_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append feature names to a dana object — add_feat_name","text":"","code":"set.seed(123) mock_X <- matrix(rnorm(20 * 5), nrow = 20) colnames(mock_X) <- paste0(\"feat_\", seq_len(5)) rownames(mock_X) <- paste0(\"sample_\", seq_len(20))  mock_names <- data.frame(   feat_id = paste0(\"feat_\", seq_len(5)),   feat_name = c(     \"Glucose\",     \"Lactic acid\",     \"Citric acid\",     \"Palmitic acid\",     \"Cholesterol\"   ),   stringsAsFactors = FALSE )  sample_data <- data.frame(   sample_id = rownames(mock_X),   group = factor(rep(c(\"A\", \"B\"), each = 10)),   time = factor(rep(c(\"T1\", \"T2\"), times = 10)),   subject_id = factor(rep(seq_len(10), each = 2)),   stringsAsFactors = FALSE ) rownames(sample_data) <- sample_data$sample_id  fit_df <- data.frame(   feat_id = rep(colnames(mock_X), each = 2),   Coefficient = rep(c(\"(Intercept)\", \"groupB\"), 5),   Estimate = rnorm(10),   `Pr(>|t|)` = runif(10),   padj = runif(10),   stringsAsFactors = FALSE )  # Mock dana object dana_obj <- list(   X = mock_X,   sdata = sample_data,   formula_rhs = ~ group,   fit = fit_df,   lrt = data.frame(),   ranef = data.frame() ) class(dana_obj) <- \"dana\"  # Add fearure labels dana_obj <- dana_obj |>   add_feat_name(mock_names)"},{"path":"https://lmartinezgili.github.io/readyomics/reference/add_taxa.html","id":null,"dir":"Reference","previous_headings":"","what":"Add taxonomic information to dana object — add_taxa","title":"Add taxonomic information to dana object — add_taxa","text":"Appends features taxonomy dana object tables.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/add_taxa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add taxonomic information to dana object — add_taxa","text":"","code":"add_taxa(   dana_obj,   taxa_table,   taxa_rank = c(\"asv\", \"substrain\", \"strain\", \"species\", \"genus\", \"family\", \"order\",     \"class\", \"phylum\", \"domain\") )"},{"path":"https://lmartinezgili.github.io/readyomics/reference/add_taxa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add taxonomic information to dana object — add_taxa","text":"dana_obj dana object returned dana(). taxa_table taxonomy table data.frame taxonomy ranks columns row names corresponding feat_ids dana object. taxa_rank character string specifying taxonomy level input features. Accepts one : \"asv\", \"substrain\", \"strain\", \"species\", \"genus\", \"family\", \"order\", \"class\", \"phylum\", \"domain\".","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/add_taxa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add taxonomic information to dana object — add_taxa","text":"modified version dana_obj, taxonomy information added relevant tables.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/add_taxa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add taxonomic information to dana object — add_taxa","text":"taxa_rank = \"asv\", taxon_name constructed pasting ASV ID species (available) genus name. ranks, taxon_name taken directly corresponding column taxa_table. higher-level taxonomy ranks available taxa_table also appended.","code":""},{"path":[]},{"path":"https://lmartinezgili.github.io/readyomics/reference/add_taxa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add taxonomic information to dana object — add_taxa","text":"","code":"set.seed(123) mock_X <- matrix(rnorm(20 * 5), nrow = 20) colnames(mock_X) <- paste0(\"feat_\", seq_len(5)) rownames(mock_X) <- paste0(\"sample_\", seq_len(20))  mock_taxa <- data.frame(   Domain = rep(\"Bacteria\", 5),   Phylum = c(\"Firmicutes\", \"Bacteroidota\", \"Proteobacteria\",              \"Actinobacteriota\", \"Firmicutes\"),   Class = c(\"Bacilli\", \"Bacteroidia\", \"Gammaproteobacteria\",             \"Actinobacteria\", \"Clostridia\"),   Order = c(\"Lactobacillales\", \"Bacteroidales\", \"Enterobacterales\",             \"Bifidobacteriales\", \"Clostridiales\"),   Family = c(\"Lactobacillaceae\", \"Bacteroidaceae\", \"Enterobacteriaceae\",              \"Bifidobacteriaceae\", \"Clostridiaceae\"),   Genus = c(\"Lactobacillus\", \"Bacteroides\", \"Escherichia\",             \"Bifidobacterium\", \"Clostridium\"),   Species = c(\"acidophilus\", \"fragilis\", \"coli\", \"longum\", \"butyricum\"),   row.names = paste0(\"feat_\", seq_len(5)),   stringsAsFactors = FALSE )  sample_data <- data.frame(   sample_id = rownames(mock_X),   group = factor(rep(c(\"A\", \"B\"), each = 10)),   time = factor(rep(c(\"T1\", \"T2\"), times = 10)),   subject_id = factor(rep(seq_len(10), each = 2)),   stringsAsFactors = FALSE ) rownames(sample_data) <- sample_data$sample_id  fit_df <- data.frame(   feat_id = rep(colnames(mock_X), each = 2),   Coefficient = rep(c(\"(Intercept)\", \"groupB\"), 5),   Estimate = rnorm(10),   `Pr(>|t|)` = runif(10),   padj = runif(10),   stringsAsFactors = FALSE )  # Mock dana object dana_obj <- list(   X = mock_X,   sdata = sample_data,   formula_rhs = ~ group,   fit = fit_df,   lrt = data.frame(),   ranef = data.frame() ) class(dana_obj) <- \"dana\"  # Add taxonomy dana_obj <- dana_obj |>   add_taxa(mock_taxa, taxa_rank = \"genus\")"},{"path":"https://lmartinezgili.github.io/readyomics/reference/adjust_pval.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust P-values in a dana object — adjust_pval","title":"Adjust P-values in a dana object — adjust_pval","text":"Applies multiple testing correction P-values differential analysis results returned dana() function. Supports multiple adjustment methods coefficient likelihood ratio test (LRT) P-values.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/adjust_pval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust P-values in a dana object — adjust_pval","text":"","code":"adjust_pval(   dana_obj,   padj_by = c(\"all\", \"terms\"),   padj_method = NULL,   padj_method_LRT = NULL,   ihw_covar = NULL,   ihw_covar_id = NULL,   ihw_args = list(),   storey_args = list(),   verbose = TRUE )"},{"path":"https://lmartinezgili.github.io/readyomics/reference/adjust_pval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust P-values in a dana object — adjust_pval","text":"dana_obj dana class object returned dana() function. padj_by Character string. Whether P-value adjustment done globally across coefficients (\"\") separately coefficient term (\"terms\"). padj_method Character vector one methods adjusting P-values coefficient tests. Defaults \"BH\". padj_method_LRT Character vector one methods adjusting P-values LRT tests. Defaults \"BH\". P-values LRT tests always adjusted independently LRT term. ihw_covar Data frame containing covariable(s) used IHW::ihw(). Must contain \"feat_id\" column, matching dana object \"feat_id\" labels. ihw_covar_id Character string. Column name ihw_covar used covariates argument IHW::ihw(). ihw_args Named list. Additional arguments passed IHW::ihw(). provide covariates argument, obtained ihw_covar. storey_args Named list. Additional arguments passed qvalue::qvalue(). verbose Logical. Whether print informative messages. Defaults TRUE.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/adjust_pval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust P-values in a dana object — adjust_pval","text":"modified dana object new columns $fit $lrt data frames adjusted P-value method applied (e.g. padj_BH, padj_storey_group).","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/adjust_pval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adjust P-values in a dana object — adjust_pval","text":"Available adjustment methods include: \"BH\", \"bonferroni\", \"\", \"fdr\", \"hochberg\", \"holm\", \"hommel\", \"IHW\", \"storey\".","code":""},{"path":[]},{"path":"https://lmartinezgili.github.io/readyomics/reference/adjust_pval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust P-values in a dana object — adjust_pval","text":"","code":"set.seed(123) mock_X <- matrix(rnorm(20 * 5), nrow = 20) colnames(mock_X) <- paste0(\"feat_\", seq_len(5)) rownames(mock_X) <- paste0(\"sample_\", seq_len(20))  sample_data <- data.frame(   sample_id = rownames(mock_X),   group = factor(rep(c(\"A\", \"B\"), each = 10)),   time = factor(rep(c(\"T1\", \"T2\"), times = 10)),   subject_id = factor(rep(seq_len(10), each = 2)),   stringsAsFactors = FALSE ) rownames(sample_data) <- sample_data$sample_id  fit_df <- data.frame(   feat_id = rep(colnames(mock_X), each = 2),   Coefficient = rep(c(\"(Intercept)\", \"groupB\"), 5),   Estimate = rnorm(10),   `Pr(>|t|)` = runif(10),   stringsAsFactors = FALSE )  # Mock dana object dana_obj <- list(   X = mock_X,   sdata = sample_data,   formula_rhs = ~ group,   fit = fit_df,   lrt = data.frame(),   ranef = data.frame() ) class(dana_obj) <- \"dana\"  # Add adjusted P-values dana_obj <- dana_obj |>   adjust_pval(padj_method = c(\"BH\", \"bonferroni\"),               padj_method_LRT = NULL,               padj_by = \"terms\",               verbose = FALSE)"},{"path":"https://lmartinezgili.github.io/readyomics/reference/build_phyloseq.html","id":null,"dir":"Reference","previous_headings":"","what":"Build phyloseq objects for all taxonomy ranks — build_phyloseq","title":"Build phyloseq objects for all taxonomy ranks — build_phyloseq","text":"Constructs list phyloseq objects feature matrix (X), sample data, taxonomy (optionally) phylogenetic tree data.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/build_phyloseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build phyloseq objects for all taxonomy ranks — build_phyloseq","text":"","code":"build_phyloseq(   X,   sample_data,   taxa_table = NULL,   phylo_tree = NULL,   taxa_in_rows,   verbose = TRUE )"},{"path":"https://lmartinezgili.github.io/readyomics/reference/build_phyloseq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build phyloseq objects for all taxonomy ranks — build_phyloseq","text":"X numeric matrix NGS features (e.g., ASVs), samples rows features columns (recommended) vice versa. sample_data data.frame containing sample data. Row names must match sample identifiers X. taxa_table (Optional) taxonomy table row names corresponding feature names X, taxonomic ranks columns. phylo_tree (Optional) phylogenetic tree. taxa_in_rows Logical. TRUE, X assumed taxa rows samples columns. verbose Logical. TRUE, diagnostic messages printed.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/build_phyloseq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build phyloseq objects for all taxonomy ranks — build_phyloseq","text":"named list phyloseq objects related output: asv Phyloseq object raw feature counts (usually ASVs). <tax_rank> Phyloseq objects higher taxonomy ranks taxa_table.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/build_phyloseq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build phyloseq objects for all taxonomy ranks — build_phyloseq","text":"Phyloseq objects higher taxonomic ranks also generated taxa_table provided. Higher rank taxa labels matching \"unclass\" \"unknown\" excluded aggregation. long strings detected feature IDs X matrix taxa_table, (example actual DNA sequence used ID), issue warning, significantly slow computation increase memory usage.","code":""},{"path":[]},{"path":"https://lmartinezgili.github.io/readyomics/reference/build_phyloseq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build phyloseq objects for all taxonomy ranks — build_phyloseq","text":"","code":"if (requireNamespace(\"phyloseq\", quietly = TRUE)) { mock_X <- matrix(c(10, 0, 5, 3, 1, 7),                  nrow = 2, byrow = TRUE,                  dimnames = list(c(\"sample1\", \"sample2\"),                                  c(\"ASV1\", \"ASV2\", \"ASV3\"))                  )  mock_sample_data <- data.frame(sample_id = c(\"sample1\", \"sample2\"),                                group = c(\"A\", \"B\"),                                row.names = c(\"sample1\", \"sample2\")                                )  mock_taxa_table <- data.frame(Domain = c(\"Bacteria\", \"Bacteria\", \"Bacteria\"),                               Genus = c(\"GenusA\", \"GenusB\", \"Unknown\"),                               row.names = c(\"ASV1\", \"ASV2\", \"ASV3\")                               )  phyloseq_ready <- build_phyloseq(X = mock_X,                                  sample_data = mock_sample_data,                                  taxa_table = mock_taxa_table,                                  taxa_in_rows = FALSE,                                  verbose = FALSE) }"},{"path":"https://lmartinezgili.github.io/readyomics/reference/dana.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential analysis (dana) — dana","title":"Differential analysis (dana) — dana","text":"Feature-wise stats::lm() lme4::lmer() models omics data matrix. Supports likelihood ratio tests (LRT) parallel computation.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/dana.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential analysis (dana) — dana","text":"","code":"dana(   X,   sample_data,   formula_rhs,   term_LRT = NULL,   model_control = list(),   platform = c(\"ms\", \"nmr\", \"ngs\"),   assay = NULL,   verbose = TRUE )"},{"path":"https://lmartinezgili.github.io/readyomics/reference/dana.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential analysis (dana) — dana","text":"X numeric matrix samples rows features columns. Sample IDs row names must match format sample_id column sample_data. sample_data data frame containing sample-level data. Must sample_id column matching row names X sample_data. formula_rhs one-sided formula (e.g., ~ group + (1|subject)). Must contain response variable. term_LRT Optional. Character vector formula terms test via LRT. Random effects must written without parentheses (e.g., \"1 | group\"). model_control Optional. List control arguments passed model. platform Character string indicating omics platform (e.g., \"ms\", \"nmr\", \"ngs\"). assay Optional. Character string indicating name platform assay (e.g., \"lipidomics\"). verbose Logical. TRUE, prints progress messages.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/dana.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential analysis (dana) — dana","text":"object class \"dana\": X Matched data matrix. sdata Matched sample data. fit Data frame model coefficients confidence intervals per feature. lrt Likelihood ratio test results (term_LRT specified). ranef Random effects variance components (using mixed models). errors data frame logging model fitting errors per feature.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/dana.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential analysis (dana) — dana","text":"Models fit independently feature using stats::lm() lmerTest::lmer(), depending whether dana() detects random effects formula_rhs. Feature-wise models can evaluated parallel using future::plan(), optional progress updates via progressr::with_progress().","code":""},{"path":[]},{"path":"https://lmartinezgili.github.io/readyomics/reference/dana.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential analysis (dana) — dana","text":"","code":"mock_X <- matrix(   rnorm(50 * 10) +     rep(c(rep(0, 25), rep(2, 25)), each = 10) * rep(1:10 %in% 1:3, each = 50),   nrow = 50 )  rownames(mock_X) <- paste0(\"sample\", 1:50) colnames(mock_X) <- paste0(\"feat\", 1:10)  sample_data <- data.frame(   sample_id = rownames(mock_X),   group = factor(rep(c(\"A\", \"B\"), each = 25)),   subject = factor(rep(1:25, each = 2)),   row.names = rownames(mock_X) )  # Example with parallel computation setup (not run) # future::plan(multisession) # progressr::handlers(global = TRUE) # progressr::with_progress({   result <- dana(X = mock_X,                  sample_data = sample_data,                  formula_rhs = ~ group + (1 | subject),                  term_LRT = c(\"group\", \"1 | subject\"), # Multiple terms allowed                  platform = \"ms\",                  assay = \"lipidomics\",                  verbose = FALSE                  ) #> Computing profile confidence intervals ... #> refitting model(s) with ML (instead of REML) #> refitting model(s) with ML (instead of REML) #> boundary (singular) fit: see help('isSingular') #> Computing profile confidence intervals ... #> boundary (singular) fit: see help('isSingular') #> refitting model(s) with ML (instead of REML) #> refitting model(s) with ML (instead of REML) #> Computing profile confidence intervals ... #> refitting model(s) with ML (instead of REML) #> refitting model(s) with ML (instead of REML) #> Computing profile confidence intervals ... #> refitting model(s) with ML (instead of REML) #> refitting model(s) with ML (instead of REML) #> Computing profile confidence intervals ... #> refitting model(s) with ML (instead of REML) #> refitting model(s) with ML (instead of REML) #> boundary (singular) fit: see help('isSingular') #> Computing profile confidence intervals ... #> boundary (singular) fit: see help('isSingular') #> refitting model(s) with ML (instead of REML) #> refitting model(s) with ML (instead of REML) #> boundary (singular) fit: see help('isSingular') #> Computing profile confidence intervals ... #> boundary (singular) fit: see help('isSingular') #> refitting model(s) with ML (instead of REML) #> refitting model(s) with ML (instead of REML) #> Computing profile confidence intervals ... #> refitting model(s) with ML (instead of REML) #> refitting model(s) with ML (instead of REML) #> boundary (singular) fit: see help('isSingular') #> Computing profile confidence intervals ... #> boundary (singular) fit: see help('isSingular') #> refitting model(s) with ML (instead of REML) #> refitting model(s) with ML (instead of REML) #> Computing profile confidence intervals ... #> refitting model(s) with ML (instead of REML) #> refitting model(s) with ML (instead of REML) # })  # Modify `dana` object at once with pipes (not run) # dana_obj <- dana_obj |> adjust_pval() |> add_feat_name() |> ready_plots()"},{"path":"https://lmartinezgili.github.io/readyomics/reference/mva.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate analysis (PCA, PLS, OPLS) — mva","title":"Multivariate analysis (PCA, PLS, OPLS) — mva","text":"Performs PCA, PLS, OPLS using ropls generates formatted scores plot based first two components.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/mva.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate analysis (PCA, PLS, OPLS) — mva","text":"","code":"mva(   X,   sample_data,   group_colour = NULL,   group_shape = NULL,   plot_title = NULL,   verbose = TRUE,   ... )"},{"path":"https://lmartinezgili.github.io/readyomics/reference/mva.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate analysis (PCA, PLS, OPLS) — mva","text":"X numeric matrix data frame features (e.g., metabolites, genes), samples rows features columns. sample_data data.frame containing sample-level data. Row names must match sample identifiers X must also column named \"sample_id\". group_colour Optional. Character colname sample_data used point color mapping. group_shape Optional. Character colname sample_data used point shape mapping. plot_title Optional. Character string specifying plot title. verbose Logical. TRUE, displays progress messages. ... Additional arguments passed ropls::opls() (e.g.predI =, orthoI =).","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/mva.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate analysis (PCA, PLS, OPLS) — mva","text":"named list two elements: ropls_obj ropls::opls() object. scores_plot ggplot2::ggplot() object showing scores plot.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/mva.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multivariate analysis (PCA, PLS, OPLS) — mva","text":"analysis type depends ... arguments passed ropls::opls().","code":""},{"path":[]},{"path":"https://lmartinezgili.github.io/readyomics/reference/mva.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multivariate analysis (PCA, PLS, OPLS) — mva","text":"","code":"# PCA if (requireNamespace(\"ropls\", quietly = TRUE)) { set.seed(123) mock_X <- matrix(rnorm(40),                  nrow = 10,                  dimnames = list(paste0(\"sample\", 1:10),                                  paste0(\"feat\", 1:4))                  )  sample_data <- data.frame(   sample_id = rownames(mock_X),   group = factor(rep(c(\"A\", \"B\"), each = 5)),   batch = factor(rep(1:2, times = 5)),   row.names = rownames(mock_X),   stringsAsFactors = FALSE )  result <- mva(   X = mock_X,   sample_data = sample_data,   group_colour = \"group\",   group_shape = \"batch\",   plot_title = \"Test PCA Plot\",   predI = 2,  # PCA: set components   verbose = FALSE )  # PCA plot result$scores_plot } #> PCA #> 10 samples x 4 variables #> standard scaling of predictors #>       R2X(cum) pre ort #> Total    0.817   2   0"},{"path":"https://lmartinezgili.github.io/readyomics/reference/permanova.html","id":null,"dir":"Reference","previous_headings":"","what":"PERMANOVA with flexible permutation control — permanova","title":"PERMANOVA with flexible permutation control — permanova","text":"Performs PERMANOVA (Permutational Multivariate Analysis Variance). Supports joint-term (default vegan::adonis2()) single-term testing independent = TRUE. Several distance methods, fine-grained permutation control.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/permanova.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PERMANOVA with flexible permutation control — permanova","text":"","code":"permanova(   X,   sample_data,   formula_rhs,   dist_control = list(method = \"euclidean\", diag = FALSE, upper = FALSE),   perm_control = list(joint_terms = list(control = permute::how(blocks = NULL, nperm =     999))),   independent = TRUE,   platform = c(\"ms\", \"nmr\", \"ngs\"),   assay = NULL,   seed = NULL,   verbose = TRUE,   ... )"},{"path":"https://lmartinezgili.github.io/readyomics/reference/permanova.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PERMANOVA with flexible permutation control — permanova","text":"X processed matrix data frame features (samples rows, features columns). sample_data data.frame containing sample-level data. Row names must match X. formula_rhs one-sided formula (e.g., ~ group + age). dist_control named list arguments control distance calculation. Must contain least method. Defaults \"Euclidean\" via stats::dist(). perm_control named list specifying permute::shuffleSet() parameters. default, joint_terms parameters used, vegan::adonis2() defaults, unless variable-specific permutation settings added named list elements (e.g. perm_control = list(joint_terms = , age = , sex = )). independent Logical. TRUE, PERMANOVA test variable formula_rhs performed. platform string specifying omics platform (\"ms\", \"nmr\", \"ngs\"). Used annotation. assay Optional. Character string giving assay name annotation (e.g., \"lipidomics\"). seed Optional integer. provided, sets random seed reproducible permutation results. verbose Logical. TRUE, prints diagnostic messages. ... Additional arguments passed vegan::adonis2().","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/permanova.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PERMANOVA with flexible permutation control — permanova","text":"named list three elements: X_dist dist object. perm_matrix_joint matrix permute::shuffleSet() joint_terms control. permanova_joint data.frame PERMANOVA results using full model. permanova_indep data.frame PERMANOVA results predictor, NULL independent = FALSE.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/permanova.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PERMANOVA with flexible permutation control — permanova","text":"Supports stats::dist() vegan::vegdist() distance matrix computation. Distance method must specified dist_control$method. Permutation design controlled via permute package using permute::shuffleSet(). seed supplied, permutations used across runs reproducibility.","code":""},{"path":[]},{"path":"https://lmartinezgili.github.io/readyomics/reference/permanova.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PERMANOVA with flexible permutation control — permanova","text":"","code":"# Mock data X <- matrix(rnorm(40), nrow = 10,             dimnames = list(paste0(\"sample\", 1:10),                             paste0(\"feat\", 1:4))) sample_data <- data.frame(   sample_id = rownames(X),   group = factor(rep(c(\"A\", \"B\"), each = 5)),   age = rep(20:29, length.out = 10),   row.names = rownames(X),   stringsAsFactors = FALSE )  # Simple control structures dist_control <- list(method = \"euclidean\") perm_control <- list(   joint_terms = list(control = permute::how(blocks = NULL, nperm = 9)),   group = list(control = permute::how(blocks = NULL, nperm = 9)),   age = list(control = permute::how(blocks = NULL, nperm = 9)) )  result <- permanova(   X = X,   sample_data = sample_data,   formula_rhs = ~ group + age,   dist_control = dist_control,   perm_control = perm_control,   independent = TRUE,   platform = \"ms\",   assay = \"lipidomics\",   seed = 42,   verbose = FALSE )"},{"path":"https://lmartinezgili.github.io/readyomics/reference/process_ms.html","id":null,"dir":"Reference","previous_headings":"","what":"Process MS-like omics data — process_ms","title":"Process MS-like omics data — process_ms","text":"function performs common preprocessing steps mass spectrometry (MS)-like omics datasets, including QC sample removal, zero--NA conversion, feature prevalence filtering, transformation, feature-wise value imputation.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/process_ms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process MS-like omics data — process_ms","text":"","code":"process_ms(   X,   remove_ids = NULL,   min_prev = 0.8,   rename_feat = TRUE,   transform = c(\"none\", \"log\", \"sqrt\"),   log_base_num = 10,   impute = c(\"none\", \"min_val\", \"QRILC\"),   min_val_factor = 1,   platform = c(\"ms\", \"nmr\"),   seed = NULL,   verbose = TRUE,   ... )"},{"path":"https://lmartinezgili.github.io/readyomics/reference/process_ms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process MS-like omics data — process_ms","text":"X numeric data frame matrix (samples rows, features columns). remove_ids regex character vector filter rows X (e.g. QCs). Set NULL skip. min_prev Numeric 0 1. Minimum non-missing prevalence threshold. Zeros first converted NA. rename_feat Logical. TRUE, features renamed \"feat_n\" original labels stored. transform One \"none\", \"log\", \"sqrt\". log_base_num Numeric logarithm base. Required transform = \"log\". impute One \"none\", \"min_val\", \"QRILC\". Note: imputeLCMD::impute.QRILC() requires log-transformed data. Log-transform forced internally regardless transform =  setting. min_val_factor Numeric >= 1. Scaling factor min value imputation. platform whether data generated mass spectrometry (\"ms\") nuclear magnetic resonance spectroscopy (\"nmr\"), latter allowing negative values matrix. seed Optional integer. provided, sets random seed reproducible imputeLCMD::imputeQRILC() permutation results. verbose Logical. Show messages processing steps. ... Extra arguments passed imputeLCMD::impute.QRILC().","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/process_ms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process MS-like omics data — process_ms","text":"list: X_names Feature mapping original vs. new names. X_processed Processed numeric matrix.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/process_ms.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Process MS-like omics data — process_ms","text":"Lazar, C., Gatto, L., Ferro, M., Bruley, C., & Burger, T. (2016). Accounting multiple natures missing values label-free quantitative proteomics data sets compare imputation strategies. Journal Proteome Research, 15(4), 1116–1125. doi:10.1021/acs.jproteome.5b00981 Wei, R., Wang, J., Su, M., Jia, E., Chen, S., Chen, T., & Ni, Y. (2018). Missing value imputation approach mass spectrometry-based metabolomics data. Scientific Reports, 8, 663. doi:10.1038/s41598-017-19120-0","code":""},{"path":[]},{"path":"https://lmartinezgili.github.io/readyomics/reference/process_ms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process MS-like omics data — process_ms","text":"","code":"X <- matrix(sample(c(0:10), size = 80, replace = TRUE),             nrow = 20, ncol = 4,             dimnames = list(paste0(\"sample\", 1:20),                             paste0(\"feat\", 1:4)))  result <- process_ms(X, verbose = FALSE) # Generates NA warning #> Warning: Your data contains NAs. Samples could be silently omitted in downstream analyses."},{"path":"https://lmartinezgili.github.io/readyomics/reference/process_ngs.html","id":null,"dir":"Reference","previous_headings":"","what":"Process next generation sequencing data — process_ngs","title":"Process next generation sequencing data — process_ngs","text":"function performs quality control, filtering, normalization, transformation sequencing data raw counts. can also build phyloseq objects downstream ecological analyses, optionally returns intermediate processing steps.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/process_ngs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process next generation sequencing data — process_ngs","text":"","code":"process_ngs(   X,   sample_data,   taxa_table = NULL,   phylo_tree = NULL,   remove_ids = NULL,   min_reads = 500,   min_prev = 0.1,   normalise = c(\"load\", \"TSS\", \"none\"),   load_colname = NULL,   min_load = 10000,   transform = c(\"clr\", \"log\", \"none\"),   impute_control = list(method = \"GBM\", output = \"p-counts\", z.delete = FALSE, z.warning     = 1, suppress.print = TRUE),   raw_phyloseq = TRUE,   eco_phyloseq = TRUE,   return_all = FALSE,   verbose = TRUE )"},{"path":"https://lmartinezgili.github.io/readyomics/reference/process_ngs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process next generation sequencing data — process_ngs","text":"X numeric matrix data frame raw counts samples rows features (e.g., taxa) columns. Row names must sample IDs. sample_data data frame containing sample-level data. Must include column named sample_id matching row names X. taxa_table Optional. Taxonomy annotation table build phyloseq objects. Row names must match column names X. phylo_tree Optional. Phylogenetic tree add phyloseq objects. remove_ids regex character vector filter rows X. Set NULL skip. min_reads Numeric. Minimum number total reads required per sample. Default 500. min_prev Numeric 0 1. Minimum feature prevalence threshold. Default 0.1 (.e., feature must present >= 10 % samples). normalise Normalization method. One \"load\" (microbial load data), \"TSS\" (total sum scaling), \"none\". load_colname Column name sample_data containing microbial load values. Required normalise = \"load\". min_load Numeric. Default 1e4. Warns microbial load value < min_load. transform Transformation method. One \"clr\" (centered log-ratio zero imputation), \"log\" (pseudo-log using log1p()), \"none\". Note: using \"clr\", zero values imputed using zCompositions::cmultRepl(). impute_control named list arguments passed zCompositions::cmultRepl(). raw_phyloseq Logical. TRUE, constructs phyloseq object table raw counts (filtered failed runs needed). Default TRUE. eco_phyloseq Logical. TRUE, constructs phyloseq object ecosystem abundances (.e. normalise = \"load\"). Default TRUE. return_all Logical. TRUE, additional intermediate data matrices (X_matched, X_norm, X_prev) included output. Default FALSE. verbose Logical. TRUE, prints progress messages execution. Default TRUE.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/process_ngs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process next generation sequencing data — process_ngs","text":"named list containing: X_processed Matrix processed feature counts filtering, normalization, transformation. sdata_final Matched filtered sample_data corresponding retained samples. phyloseq_raw phyloseq object created raw filtered data. NULL raw_phyloseq = FALSE. phyloseq_eco phyloseq object ecosystem abundance data. NULL eco_phyloseq = FALSE normalise != \"load\". X_matched (Optional) Matched filtered count matrix, pre-normalization. Returned return_all = TRUE. X_norm (Optional) Normalized count matrix. Returned return_all = TRUE. X_prev (Optional) Prevalence-filtered matrix, pre-transformation. Returned return_all = TRUE.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/process_ngs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process next generation sequencing data — process_ngs","text":"Zeros imputed zCompositions::cmultRepl() CLR transformation. QC samples removed remove_ids specified. Sample IDs X sample_data row names matched aligned. Can generate phyloseq_raw phyloseq object containing raw counts phyloseq_eco object ecosystem counts, load_colname column sample_data provided normalize counts microbial load (recommended best practice).","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/process_ngs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Process next generation sequencing data — process_ngs","text":"#' McMurdie, P. J., & Holmes, S. (2013). phyloseq: R package reproducible interactive analysis graphics microbiome census data. PLoS ONE, 8(4), e61217. doi:10.1371/journal.pone.0061217 Martín-Fernández, J. ., Hron, K., Templ, M., Filzmoser, P., & Palarea-Albaladejo, J. (2015). Bayesian-multiplicative treatment count zeros compositional data sets. Statistical Modelling, 15(2), 134–158. doi:10.1177/1471082X14535524 Palarea-Albaladejo, J., & Martín-Fernández, J. . (2015). zCompositions—R package multivariate imputation left-censored data compositional approach. Chemometrics Intelligent Laboratory Systems, 143, 85–96. doi:10.1016/j.chemolab.2015.02.019 Gloor, G. B., Macklaim, J. M., Pawlowsky-Glahn, V., & Egozcue, J. J. (2017). Microbiome datasets compositional: optional. Frontiers Microbiology, 8, 2224. doi:10.3389/fmicb.2017.02224 Vandeputte, D., Kathagen, G., D’hoe, K., Vieira-Silva, S., Valles-Colomer, M., Sabino, J., Wang, J., Tito, R. Y., De Commer, L., Darzi, Y., Vermeire, S., Falony, G., & Raes, J. (2017). Quantitative microbiome profiling links gut community variation microbial load. Nature, 551(7681), 507–511. doi:10.1038/nature24460","code":""},{"path":[]},{"path":"https://lmartinezgili.github.io/readyomics/reference/process_ngs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process next generation sequencing data — process_ngs","text":"","code":"if (requireNamespace(\"phyloseq\", quietly = TRUE)) { mock_X <- matrix(sample(0:1000, 25, replace = TRUE),                  nrow = 5,                  dimnames = list(paste0(\"sample\", 1:5),                  paste0(\"ASV\", 1:5))                  )  mock_sample_data <- data.frame(   sample_id = paste0(\"sample\", 1:5),   load = c(1e5, 2e5, 1e4, 5e4, 1.5e5),   condition = factor(rep(c(\"A\", \"B\"), length.out = 5)),   row.names = paste0(\"sample\", 1:5)   )  mock_taxa_table <- data.frame(   Kingdom = rep(\"Bacteria\", 5),   Genus = paste0(\"Genus\", 1:5),   row.names = paste0(\"ASV\", 1:5)   )  result <- process_ngs(   X = mock_X,   sample_data = mock_sample_data,   taxa_table = mock_taxa_table,   normalise = \"load\",   load_colname = \"load\",   transform = \"none\",   verbose = FALSE   ) }"},{"path":"https://lmartinezgili.github.io/readyomics/reference/ready_plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate plots from a differential analysis (dana) object — ready_plots","title":"Generate plots from a differential analysis (dana) object — ready_plots","text":"function produces range coefficient- feature-level plots dana object given model term interest. supports main effect interaction terms, can visualize significant results either fit lrt P values.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/ready_plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate plots from a differential analysis (dana) object — ready_plots","text":"","code":"ready_plots(   dana_obj,   term_name,   pval_match,   alpha = 0.1,   add_interactions = TRUE,   add_labels = TRUE,   plot_coeff = TRUE,   plot_feat = TRUE,   plot_ranef = FALSE,   X_colnames = NULL,   sdata_var = NULL,   group_colours = NULL,   paired_id = NULL,   verbose = TRUE,   ... )"},{"path":"https://lmartinezgili.github.io/readyomics/reference/ready_plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate plots from a differential analysis (dana) object — ready_plots","text":"dana_obj dana object returned dana(), containing model results. term_name name model term plot (e.g., \"group\" \"group:time\"). pval_match Regex pattern match desired P value column results. alpha Numeric. Significance threshold consider features plotting. Default 0.1. add_interactions Logical. Whether include interaction terms related term_name. add_labels Logical. Whether add custom feature labels plots. \"feat_name\" \"taxon_name\" column must dana object. See add_taxa() add_feat_name(). plot_coeff Logical. Whether generate coefficient-level plots. generate volcano, heatmap dot plots. plot_feat Logical. Whether generate feature-level plots specific variable sample_data. plot_ranef Logical. Whether generate random effect variance plots. mixed-effects models. X_colnames Optional. Character vector specifying features X plot. NULL plot_feat = TRUE (default), top 10 features based P value selected. sdata_var Character. column dana_obj$sdata used feature-level plots plot_feat = TRUE. group_colours Optional named vector colours sdata_var groups passed values argument ggplot2::scale_fill_manual(). paired_id Optional. Column name sdata specifying sample pairing (e.g., subject_id). verbose Logical. Whether display messages processing. ... Additional ggplot2::theme() arguments passed internal plotting helpers (e.g., font sizes).","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/ready_plots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate plots from a differential analysis (dana) object — ready_plots","text":"named list ggplot objects stored dana_obj$plots. may include: coeff_volcano, coeff_heatmap, coeff_point feat_scatter, feat_boxplot, feat_violin, feat_ridge ranef_all","code":""},{"path":"https://lmartinezgili.github.io/readyomics/reference/ready_plots.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate plots from a differential analysis (dana) object — ready_plots","text":"add_interactions = TRUE, function shows fit coefficients match significant main interaction terms. significant features found specified alpha significance threshold, function abort.","code":""},{"path":[]},{"path":"https://lmartinezgili.github.io/readyomics/reference/ready_plots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate plots from a differential analysis (dana) object — ready_plots","text":"","code":"set.seed(123) mock_X <- matrix(rnorm(20 * 5), nrow = 20) colnames(mock_X) <- paste0(\"feat_\", seq_len(5)) rownames(mock_X) <- paste0(\"sample_\", seq_len(20))  sample_data <- data.frame(   sample_id = rownames(mock_X),   group = factor(rep(c(\"A\", \"B\"), each = 10)),   time = factor(rep(c(\"T1\", \"T2\"), times = 10)),   subject_id = factor(rep(seq_len(10), each = 2)),   stringsAsFactors = FALSE ) rownames(sample_data) <- sample_data$sample_id  fit_df <- data.frame(   feat_id = rep(colnames(mock_X), each = 2),   Coefficient = rep(c(\"(Intercept)\", \"groupB\"), 5),   Estimate = rnorm(10),   `Pr(>|t|)` = runif(10),   padj = runif(10),   stringsAsFactors = FALSE )  # Mock dana object dana_obj <- list(   X = mock_X,   sdata = sample_data,   formula_rhs = ~ group,   fit = fit_df,   lrt = data.frame(),  #' empty but valid   ranef = data.frame() #' empty but valid ) class(dana_obj) <- \"dana\"  dana_obj <- dana_obj |> ready_plots(   term_name = \"group\",   pval_match = \"padj\",   alpha = 0.5,   add_labels = FALSE,   plot_coeff = TRUE,   plot_feat = TRUE,   plot_ranef = FALSE,   sdata_var = \"group\",   verbose = FALSE )  # Visualize generated plots dana_obj$plots #> $coeff_volcano #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_text_repel()`).  #>  #> $coeff_heatmap  #>  #> $coeff_point  #>  #> $feat_boxplot  #>  #> $feat_violin  #>  #> $feat_ridge #> Picking joint bandwidth of 0.385  #>"},{"path":"https://lmartinezgili.github.io/readyomics/news/index.html","id":"readyomics-020","dir":"Changelog","previous_headings":"","what":"readyomics 0.2.0","title":"readyomics 0.2.0","text":"Added adjust_pval() arguments IHW::ihw() qvalue::qvalue().","code":""},{"path":"https://lmartinezgili.github.io/readyomics/news/index.html","id":"readyomics-012","dir":"Changelog","previous_headings":"","what":"readyomics 0.1.2","title":"readyomics 0.1.2","text":"CRAN release: 2025-09-18 draw_quantiles removed ggplot2::geom_violin().","code":""},{"path":"https://lmartinezgili.github.io/readyomics/news/index.html","id":"readyomics-011","dir":"Changelog","previous_headings":"","what":"readyomics 0.1.1","title":"readyomics 0.1.1","text":"CRAN release: 2025-08-27 Minor fixes documentation CRAN macOS flavor checks.","code":""},{"path":"https://lmartinezgili.github.io/readyomics/news/index.html","id":"readyomics-010","dir":"Changelog","previous_headings":"","what":"readyomics 0.1.0","title":"readyomics 0.1.0","text":"CRAN release: 2025-08-20 Initial CRAN submission.","code":""}]
